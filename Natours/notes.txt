Course Notes: "Advanced Css and Sass" (https://www.udemy.com/course/advanced-css-and-sass/)
by Jonas Schmedmann (https://www.udemy.com/course/advanced-css-and-sass/#instructor-1)

MDN: https://developer.mozilla.org/en-US/docs/Web

********************************************************************************
* Project 1: Natours Web Site
********************************************************************************

Lecture 6) Building the Header - Part 1
* Basic reset: universal selector applies to every element
* font properties in the body selector, since they are inherited from parent
* background images use "url()" function, relative to location of the style sheet
* background gradients use also "background-image" property,
  * "linear-gradient()" function and others
* "background-size" property "sets the size of the element's background image" (MDN)
  * "cover" "scales the image as large as possible to fill the container, stretching
     the image if necessary" (MDN)
* "background-position" property "sets the initial position for each background image" (MDN)
  * "top" pins the top of the image; any necessary cropping crops elsewhere in the image
* "vh" is percentage of view port height
* "Percentages ... are defined relative to the value of the parent element's corresponding parameter"
   (https://www.udemy.com/course/advanced-css-and-sass/learn/lecture/8274486#questions/9667946)
* clip-path property and polygon() function
* bennettfeely.com/clippy: CSS clip-path maker


Lecture 7) Building the Header - Part 2
* Positioning an inline element is easiest if it is wrapped in a block element
* Position: absolute is relative to nearest positioned ancestor, so position an ancestor
  (usually with position: relative) even if that ancestor would otherwise be fine with static
  positioning.
* <h1> is the primary text for the page, for SEO and screen readers
* Use <span> to style text.  Multiple <span> within <h1> to style different parts of the <h1>.
  Style <span> with display: block to break it into two lines.  (<div>, which is a block element
  naturally, is not permitted within <h1>).
* Percentages in translate() function are defined relative to height and width of the element itself
  (not the parent element, as percentages usually are);


Lecture 8) Creating Cool CSS Animations
* Using the @keyframes @keyframes rule:
@keyframes [AnimationName] {
    [%] {
        [properties]
    }
}
* for browser performance, only animate opacity and transform
* "backface-visibility: none" on animated element suppresses animation jitter


Lecture 9) Building a Complex Animated Button - Part 1
* Pseudo-classes are "special state" of selector, to style elements under special conditions
* :pseudo-class
* Padding on inline element does not move the element, so background will cover surrouding elements;
  to fix this, declare the ineline element with display: inline-block.
* Add transition property on *initial* state


Lecture 10) Building a Complex Animated button - Part 2
* Psudo-elements "let you style a specific part of the selected element" (MDN).
* ::pseudo-element
* ::after pseudo-element adds a virtual element after the selected element
* To achieve the effect in this lesson, add element exactly like the current one, but behind it
* ::after needs content (even if its empty) via "content:" property to appear on page
* ::after needs "display" property to appear on page


Lecture 12) Three Pillars of Writing Good HTML and CSS
* Responsive Design:
  * fluid layouts
  * media queries
  * responsive images
  * correct units
  * desktop-first vs mobile-first
* Maintainable and scalable code
  * clean
  * easy to understand
  * growth
  * re-usable
  * file organization
  * class names
  * html structure
* Web performance
  * fewer HTTP requests
  * less code, compressed code
  * CSS preprocessor
  * fewer images, compressed images


Lecture 13) How CSS Works Behind the Schenes: An Overview
* CSS parsing:
  * Resolve conflicting CSS declarations (cascade)
  * Process final CSS values


Lecture 14) How CSS is Parsed, Part 1: The Cascade and Specificity
* Cascade: process of resolving conflicts between rules when more than one rule applies to an element
* CSS sources: author, user, browser ("user agent")
* Importance > specificity > source order
* Importance
  * User !important declarations
  * author !important declarations
  * author declarations
  * user declarations
  * browser defaults
* Specificity (inline, IDs, classes, elements)
  * Inline
  * IDs
  * classes, pseudo-classes, attributes
  * elements, pesuedo-elements
* Source order: last CSS declaration resolves ties beteween rules with identical specificities
* Universal selector * has no specificity value (0, 0, 0, 0)
* Rely more on specificity than order
* But rely on order when using 3rd party stylesheets: always put your sheet last.


Lecture 16) How CSS is Parsed, Part 2: Value Processing
* Example of how browser calculates values, step by step
* All linear units eventually converted to pixels
* declared value
  -> cascaded value (after cascade)
  -> specified value: cascaded value (if any), else computed value of parent element (if inheritable), else initial value
  -> computed value (convert relative to absolute)
  -> used value (final calculations)
  -> actual value (rounded, browser and device restrictions)
* Initial value: For every element, every property has a value, even if none is declared.
* Converting Units from relative to absolute (px)
  * % values are relative to parent element's corresponding size (font, height or width)
  * em use parent element font size for fonts sizes, current element font size for lengths
  * rem use root element font size of both fonts and lengths
* vh: 1% of viewport height
* vw: 1% of viewport width


Lecture 17) How CSS is Parsed, Part 3: Inheritance
* propagating property values from parent elements to children
* inheritance: specified value = COMPUTED value of parent element
* generally, text-related properties are inheritable, others not
* computed value, not declared value, is inherited
* values inherited only if value is not declared
* "inherit" keyword forces inheritance
* "initial" keyword restores value to initial value


Lecture 19) How CSS Renders a Website: The Visual Formatting Model
* Box model: every element
* Content: text, images, etc.
* Padding: transparent area around content inside of box
* Border: goes around content
* Margin: Space between boxes
* Fill area: content + padding + border (not margin)
* height of box, if not otherwise specified, is height of content
* default box-sizing: height and width exclude padding and border
* border-box: height and width include padding and border
* block element:
  * displayed as block
  * also include flex, list-item and table displays
  * 100% of parent width
  * vertical stack, includes line break
  * box model applies as showed
* inline
  * content distributed in lintes
  * occupies only the content's space
  * no line breaks
  * NO HEIGHT AND WIDTH
  * padding and margin on left and right only
* inline-block
  * inline boxes but with box model applied as showed
* Positioning schemes: normal, float, absolute
* normal: default, laid out in source order
* float: container will not adjust height to element; requires clear fix
* absolute:
  * element removed from normal flow
  * no impact on surrounding content or elements
  * offset w/ top, bottom, left, right
* stacking context: z-index and others

Lecture 20) CSS Architecture, Components and BEM
* page: components held together by the layout
* components should be re-usable across, between projects;
* components should be independent of parent
* BEM: Block-element modifier paradigm
  * block: standalone component meaningful on its own
  * element: part of a block lacking independent meaning
  * element class name includes block classname: low specificity
  * modifier: modifies the element
* 7-1 Pattern: 7 folders for partial Sass files, 1 main Sass file
  * base/ components/ layout/ pages/ themes/ abstracts/ vendors/


Lecture 24) First Steps with Sass: Variables and Nesting
* SASS functions darken, lighten


Lecture 25) First Steps with Sass: Mixins, Extends and Functions
* mixin: re-usable piece of SASS
* @mixin to define
* @include to use
* mixins can take parameters
* SASS user-defined functions:
    @function divide($a, $b) {
        @return $a/$b;
    }

* SASS extends:
  %btn-placeholder {
     padding: 10px;
  }
  @extend %btn-placeholder
* @include copies the included text to the selector; @extend copies the selector to the extension
* Use @extends only if the rules being extended are inherently related


Lecture 27) NPM Packages: Let's Install SASS Locally
* First install node JS and NPM.  (https://docs.aws.amazon.com/sdk-for-javascript/v2/developer-guide/setting-up-node-on-ec2-instance.html)
$> curl -o- https://raw.githubusercontent.com/nvm-sh/nvm/v0.34.0/install.sh | bash
$> . ~/.nvm/nvm.sh
$> nvm install node
* Then create package.json and download depdendencies
$> node init     # creates package.json in dev environment
$> npm install node-sass --save-dev   # writes sass to package.json dev dependencies
$> npm install jquery --save          # writes to package.json dependencies
$> npm install                        # recreates from package.json file
$> npm uninstall jquery --save


Lecture 28) NPM Scripts: Let's Write and Compile SASS Locally
* Run SASS from the linux command line
$> node-sass test.scss test.css
$> in package.json
scripts {
    "compile:sass" : "node-sass sass/main.scss css/style.css"
}
$> npm run compile:sass


Lecture 29) The Easiset Way of Automatically Reloading a Page on File Changes
$> npm install -g live-server
$> live-server
