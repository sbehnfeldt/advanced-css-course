Course Notes: "Advanced Css and Sass" (https://www.udemy.com/course/advanced-css-and-sass/)
by Jonas Schmedmann (https://www.udemy.com/course/advanced-css-and-sass/#instructor-1)

MDN: https://developer.mozilla.org/en-US/docs/Web

********************************************************************************
* Project 1: Natours Web Site
********************************************************************************

Chapter 6: Building the Header - Part 1
* Basic reset: universal selector applies to every element
* font properties in the body selector, since they are inherited from parent
* background images use "url()" function, relative to location of the style sheet
* background gradients use also "background-image" property,
  * "linear-gradient()" function and others
* "background-size" property "sets the size of the element's background image" (MDN)
  * "cover" "scales the image as large as possible to fill the container, stretching
     the image if necessary" (MDN)
* "background-position" property "sets the initial position for each background image" (MDN)
  * "top" pins the top of the image; any necessary cropping crops elsewhere in the image
* "vh" is percentage of view port height
* "Percentages ... are defined relative to the value of the parent element's corresponding parameter"
   (https://www.udemy.com/course/advanced-css-and-sass/learn/lecture/8274486#questions/9667946)
* clip-path property and polygon() function
* bennettfeely.com/clippy: CSS clip-path maker


Chapter 7: Building the Header - Part 2
* Positioning an inline element is easiest if it is wrapped in a block element
* Position: absolute is relative to nearest positioned ancestor, so position an ancestor
  (usually with position: relative) even if that ancestor would otherwise be fine with static
  positioning.
* <h1> is the primary text for the page, for SEO and screen readers
* Use <span> to style text.  Multiple <span> within <h1> to style different parts of the <h1>.
  Style <span> with display: block to break it into two lines.  (<div>, which is a block element
  naturally, is not permitted within <h1>).
* Percentages in translate() function are defined relative to height and width of the element itself
  (not the parent element, as percentages usually are);


Chapter 8: Creating Cool CSS Animations
* Using the @keyframes @keyframes rule:
@keyframes [AnimationName] {
    [%] {
        [properties]
    }
}
* for browser performance, only animate opacity and transform
* "backface-visibility: none" on animated element suppresses animation jitter


Chapter 9: Building a Complex Animated Button - Part 1
* Pseudo-classes are "special state" of selector, to style elements under special conditions
* :pseudo-class
* Padding on inline element does not move the element, so background will cover surrouding elements;
  to fix this, declare the ineline element with display: inline-block.
* Add transition property on *initial* state


Chapter 10: Building a Complex Animated button - Part 2
* Psudo-elements "let you style a specific part of the selected element" (MDN).
* ::pseudo-element
* ::after pseudo-element adds a virtual element after the selected element
* To achieve the effect in this lesson, add element exactly like the current one, but behind it
* ::after needs content (even if its empty) via "content:" property to appear on page
* ::after needs "display" property to appear on page


Chapter 12: Three Pillars of Writing Good HTML and CSS
* Responsive Design:
  * fluid layouts
  * media queries
  * responsive images
  * correct units
  * desktop-first vs mobile-first
* Maintainable and scalable code
  * clean
  * easy to understand
  * growth
  * re-usable
  * file organization
  * class names
  * html structure
* Web performance
  * fewer HTTP requests
  * less code, compressed code
  * CSS preprocessor
  * fewer images, compressed images


Chapter 13: How CSS Works Behind the Schenes: An Overview
* CSS parsing:
  * Resolve conflicting CSS declarations (cascade)
  * Process final CSS values


Chapter 14: How CSS is Parsed, Part 1: The Cascade and Specificity
* Cascade: process of resolving conflicts between rules when more than one rule applies to an element
* CSS sources: author, user, browser ("user agent")
* Importance > specificity > source order
* Importance
  * User !important declarations
  * author !important declarations
  * author declarations
  * user declarations
  * browser defaults
* Specificity (inline, IDs, classes, elements)
  * Inline
  * IDs
  * classes, pseudo-classes, attributes
  * elements, pesuedo-elements
* Source order: last CSS declaration resolves ties beteween rules with identical specificities
* Universal selector * has no specificity value (0, 0, 0, 0)
* Rely more on specificity than order
* But rely on order when using 3rd party stylesheets: always put your sheet last.


Chapter 16: How CSS is Parsed, Part 2: Value Processing
* Example of how browser calculates values, step by step
* All linear units eventually converted to pixels
* declared value
  -> cascaded value (after cascade)
  -> specified value: cascaded value (if any), else computed value of parent element (if inheritable), else initial value
  -> computed value (convert relative to absolute)
  -> used value (final calculations)
  -> actual value (rounded, browser and device restrictions)
* Initial value: For every element, every property has a value, even if none is declared.
* Converting Units from relative to absolute (px)
  * % values are relative to parent element's corresponding size (font, height or width)
  * em use parent element font size for fonts sizes, current element font size for lengths
  * rem use root element font size of both fonts and lengths
* vh: 1% of viewport height
* vw: 1% of viewport width


Chapter 17: How CSS is Parsed, Part 3: Inheritance
* propagating property values from parent elements to children
* inheritance: specified value = COMPUTED value of parent element
* generally, text-related properties are inheritable, others not
* computed value, not declared value, is inherited
* values inherited only if value is not declared
* "inherit" keyword forces inheritance
* "initial" keyword restores value to initial value
