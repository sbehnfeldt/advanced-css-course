/*
COLORS:

Light green: #7ed56f
Medium green: #55c57a
Dark green: #28b485

*/

/* Basic reset: Universal selector applies to every element */
*,
*::before,
*::after {
    margin: 0;
    padding: 0;

    /* Best practice not to over-use the universal selector,
    so instead declare these properties as inheritable (which they usually are not)
    and specify the value to inherit in the body selector */
    -webkit-box-sizing: inherit;
    -moz-box-sizing: inherit;
    box-sizing: inherit;
}

html {
    /* Set root font size to 62.5% of default root font size.
     Default root font size is 16px by default, set by browser.
     This results in root font-size (and hence 1 rem) of 10px: .625 * 16px = 10px.
     Adjusts automatically if user changes default root font size */
    font-size: 62.5%;
}

body {
    /* Declared as inheritable in the universal selector,
    so all children sill have box-sizing of border-box */
    -webkit-box-sizing: border-box;
    -moz-box-sizing: border-box;
    box-sizing: border-box;

    padding: 3rem;

    /* Properties related to font are usually inherited */
    font-family: "Lato", sans-serif;
    font-weight: 400;
    line-height: 1.7; /* 1.7 times bigger than the pre-defined line height */
    color: #777;
}

.header {
    position: relative; /* To allow reference point for positioned descendants */
    height: 95vh; /* 95% of the viewport height */


    /* Gradients are coded with "background-image" property.
       Multiple images may be specified, separated by comma.
       To ensure image stays on top, it must be listed last.
       "url()" is relative to current file */
    background-image: linear-gradient(to right bottom, rgba(40, 180, 133, .8), rgba(126, 213, 111, 0.8)),
    url(../img/hero.jpg);
    background-size: cover;
    background-position: top;

    /* Specify the region in which the element (.header) will be visible */
    clip-path: polygon(0 0, 100% 0, 100% 85%, 0 100%);
}

/* Div (block display) makes positioning the img (inline display) easier */
.logo-box {
    position: absolute;

    /* Offsets relative to nearest "positioned" (relative, absolute or fixed) ancestor */
    top: 4rem;
    left: 4rem;
}

.logo {
    height: 3.5rem;   /* Width will scale accordingly */
}

.text-box {
    position: absolute;
    top: 40%; /* Top of text box is positioned at 40% of parent element height */
    left: 50%; /* Left of text box is positioned at 50% of parent element width */

    transform: translate(-50%, -50%);  /* Percentages are relative to the element itself */

    text-align: center; /* Centers text descendants AND inline (including inline-block) descendants */
}

.heading-primary {
    margin-bottom: 6rem;

    color: #ffffff;
    text-transform: uppercase;

    backface-visibility: hidden;
}

.heading-primary-main {
    display: block;
    font-size: 6rem;
    font-weight: 400;
    letter-spacing: 3.5rem;

    animation-name: moveInLeft;
    animation-duration: 1s;
}

.heading-primary-sub {
    display: block;
    font-size: 2rem;
    font-weight: 700;
    letter-spacing: 1.75rem;

    animation-name: moveInRight;
    animation-duration: 1s;
    backface-visibility: hidden;
}


@keyframes moveInLeft {
    0% {
        opacity: 0;
        transform: translateX(-10rem);
    }

    80% {
        opacity: .8;
        transform: translateX(2rem);
    }
}

@keyframes moveInRight {
    0% {
        opacity: 0;
        transform: translateX(10rem);
    }

    80% {
        opacity: .8;
        transform: translateX(-2rem);
    }
}

@keyframes moveInBottom {
    0% {
        opacity: 0;
        transform: translateY(10rem);
    }
}

/* Button to appear the same whether user has visited it or not */
.btn:link,
.btn:visited {
    position: relative;    /* To position ::after pseudo-element */
    display: inline-block; /* Allow block model to work on this element */

    padding: 1.5rem 4rem;
    border-radius: 10rem;

    font-size: 1.6rem;
    text-transform: uppercase;
    text-decoration: none;

    transition: transform .2s;   /* transition on the initial state */
}

.btn:hover {
    box-shadow: 0 1rem 2rem rgba(0,0,0, .2); /* x-offset, y-offset, blur, and semi-opaque black shadow */
    transform: translateY(-3px);
    backface-visibility: hidden;
}

.btn:active {
    box-shadow: 0 .5rem 1rem rgba(0,0,0, .2); /* Tweak shadow from hover state */
    transform: translateY(-1px);  /* Relative to initial state, not the :hover pseudo-class */
}

.btn-white {
    background-color: #fff;
    color: #777;
}

.btn::after {
    content: "";

    position: absolute;
    top: 0;
    left: 0;
    z-index: -1;   /* Behind the parent .btn */

    display: inline-block;   /* Same as the .btn */

    /* ::after is treated as a child of the main element; height and width are relative to the parent */
    height: 100%;
    width: 100%;

    border-radius: 10rem;

    transition: transform .5s, opacity .5s;
}

.btn-white::after {
    background-color: #fff;
}

/* ::after pseudo-element ONLY after .btn in :hover pseudo-class state */
.btn:hover::after {
    transform: scaleX(1.4) scaleY(1.6);
    opacity: 0;
}

.btn-animated {
    animation: moveInBottom;
    animation-duration: .5s;
    animation-timing-function: ease-out;
    animation-delay: .75s;
    animation-fill-mode: backwards;   /* Apply properties of the 0% animation state before animation starts */
}
